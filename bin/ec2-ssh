#!/bin/bash

set -e

usage() {
    cat<<EOF
Usage: ec2-ssh [-k KEY] [-s SECRET] [-r REGION] [-t TAG] [-i] [-g gateway-host] <instance-name>

Open an ssh connection to an EC2 instance where <instance-name>=tag:value.
The 'tag:' portion of <instance-name> is optional, and defaults to 'Name'.
For a list of instances, run ec2-host without any paramteres

  -h            display this help and exit
  -k, KEY       Amazon EC2 Key, defaults to \$AWS_ACCESS_KEY_ID
  -s, SECRET    Amazon EC2 Secret, defaults to \$AWS_SECRET_ACCESS_KEY
  -r, REGION    Amazon EC2 Region, defaults to us-east-1
  -t, TAG       Tag name for searching, defaults to 'Name'
  -i, internal-ip We want to get the internal ip address
  -g gateway-host This host will be used as SSH gateway to connect to internal servers
EOF
}

# Print usage message and exit if no arguments are given
test $# -eq 0 && { usage; exit; }
use_internal_ip=false
gateway_host=false
gateway_command=""

# Process options
cmd="ec2-host"
while getopts ":hk:s:r:t:g:i" opt; do
    case $opt in
        h  ) usage; exit 1;;
        k  ) cmd="$cmd -k $OPTARG";;
        s  ) cmd="$cmd -s $OPTARG";;
        r  ) cmd="$cmd -r $OPTARG";;
        t  ) cmd="$cmd -t $OPTARG";;
        g  ) gateway_host=$OPTARG;;
        i  ) use_internal_ip=true;;
        \? ) usage; exit 1
    esac
done
shift $((OPTIND - 1))

# support user@instance-name format
IFS="@"; declare -a hostparts=($1)
inst="${hostparts[1]}"
user="${hostparts[0]}"

if [ -z "$inst" ]; then
  inst="$1"
  user="ubuntu"
fi

if [ "$gateway_host" != "false" ]; then
  proxy_command="ProxyCommand ssh $user@$gateway_host exec nc %h %p"
  #gateway_command="-o '$proxy_command'"  
  gateway_command="ssh $user@$gateway_host -t "
fi


# support tag:value format for identifying instances
IFS=":"; declare -a tagparts=($inst)
tag="${tagparts[0]}"
value="${tagparts[1]}"

IFS=" "
regions="us-east-1 eu-west-1 sa-east-1 ap-southeast-1"

for r in $regions; do
	echo "Checking region $r"
	host=$(eval "$cmd -r $r $inst")
	if [ "$host" != "" ]; then
		break
	fi
done

if [ -z "$value" ]; then
    value="$inst"
else
    cmd="$cmd -t $tag"
fi

# pass all other parameters (${@:2}) to ssh allowing
# things like: ec2-ssh nginx uptime
cmd="echo \\\". ~/.bashrc && PS1='\[\e]0;$inst: \w\\\a\]\[\\\033[01;32m\]$inst\[\\\033[00m\]:\[\\\033[01;34m\]\w\[\\\033[00m\]\\\$ '\\\" > ~/.ec2sshrc; /bin/bash --rcfile .ec2sshrc -i"
if test "${@:2}"; then
    cmd="${@:2}"
fi

if [ `echo $host|wc -l` -gt 1 ]; then
	echo "There's more than 1 host with that name..."
	cssh_options=""
	if [ "$gateway_host" != "false" ]; then
		echo "creating tmp config file"
		cat ~/.ssh/config>/tmp/cssh_config_gateway
		echo $proxy_command>>/tmp/cssh_config_gateway
		cssh_options=" -o '-F /tmp/cssh_config_gateway'"
	fi
	IFS=$'\n'; 
	cssh_cmd="cssh $cssh_options "
	for h_line in $host; do
		IFS=" "; 
		declare -a h=($h_line)
		if [ $use_internal_ip == true ]; then 
			h_name=${h[2]}
		else
			h_name=${h[1]}
		fi	
		cssh_cmd="$cssh_cmd $user@$h_name"
	done
	exec sh -c "$cssh_cmd"
else
	IFS=" "; 
	declare -a h=($host)
	if [ $use_internal_ip == true ]; then 
		h_name=${h[2]}
	else
		h_name=${h[1]}
	fi
	gateway_command_extra=""
	if [ "$gateway_command" == "" ]; then
		gateway_command_extra="-t"
	fi

	c="$gateway_command ssh $gateway_command_extra $user@$h_name \"$cmd\""

#	echo "$c"
	test -n "$host" && echo "Connecting to $user@$h_name" && exec sh -c "$c"
fi
